@use "sass:math";

// colors 	-----------------------------------------------------------------------/
$nkColor1: #296b85;
$nkColor2: #278588;
$nkColor3: #4fb18c;
$nkColor4: #6c9;
$nkColor5: #a4da81;
$nkColor6: #d1d672;
$nkColor7: #ffd263;
$nkColor8: #f5b059;
$nkColor9: #eb8f4e;
$nkColor10: #e16d44;
$nkColor11: #b76d53;
$nkColor12: #626c71;

$color1: #005e7e;
$color2: #009da9;
$color3: $nkColor10;

$titleColor: $color1;
$textColor: #587781;
$linkColor: $color2;
$listColor: $color2;
$fontSize: 2rem;

// fonts 	-----------------------------------------------------------------------/
$fontFamily: "Source Sans Pro", "-apple-system", "BlinkMacSystemFont",
  "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Open Sans",
  "Helvetica Neue", "sans-serif";
$fontFamilyTitle: "Carrara", "-apple-system", "BlinkMacSystemFont", "Segoe UI",
  "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Open Sans", "Helvetica Neue",
  "sans-serif";

// sizes 	-----------------------------------------------------------------------/
$wrapperSize: 16.8rem * 8;

$desktop: 1500px;
$smallDesktop: 1400px;
$bigTablet: 1024px;
$tablet: 900px;
$bigPhone: 720px;
$phone: 440px;
$smallPhone: 360px;

$easing: cubic-bezier(0.175, 0.885, 0.32, 1.275);

$toggleMenu-size: 6rem;

// mixins ---------------------------------------------------------------------/

@mixin resetList {
  ul,
  li {
    overflow: inherit;
    margin: 0;
    padding: 0;
    list-style-type: none;
  }
}

@mixin object-fit($fit: fill, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;

  @if $position {
    -o-object-position: $position;
    object-position: $position;
    font-family: "object-fit: #{$fit}; object-position: #{$position}";
  } @else {
    font-family: "object-fit: #{$fit}";
  }
}

@mixin resetButton {
  appearance: none;
  padding: 0;
  background: none;
  border: 0;
  outline: none;
  cursor: pointer;
  margin: 0;
}

@mixin clearfix {
  &::before,
  &::after {
    content: " ";
    display: table;
  }

  &::after {
    clear: both;
  }

  *zoom: 1;
}

@mixin breakpoint($point: null, $type: down width) {
  @if ($point != null) {
    $whichProp: "width";

    @if (
      length($type) >
        1 and
        (nth($type, 1) == "height" or nth($type, 2) == "height")
    ) {
      $whichProp: "height";
    }

    @if (length($point) > 1) {
      $maxPoint: nth($point, 2);
      $minPoint: nth($point, 1);

      @if (nth($point, 1) > nth($point, 2)) {
        $maxPoint: nth($point, 1);
        $minPoint: nth($point, 2);
      }

      $finalMinPoint: $minPoint + 1;
      $finalMaxPoint: $maxPoint;

      @if (nth($type, 1) == "up" or nth($type, 2) == "up") {
        $finalMinPoint: $minPoint;
        $finalMaxPoint: $maxPoint - 1;
      }

      @media (min-#{$whichProp}: #{$finalMinPoint}) and (max-#{$whichProp}: #{$finalMaxPoint}) {
        @content;
      }
    } @else {
      $finalPoint: $point;
      $finalType: "max-#{$whichProp}";

      @if (length($type) > 1) {
        @if (nth($type, 1) == "up" or nth($type, 2) == "up") {
          $finalPoint: $point + 1;
          $finalType: "min-#{$whichProp}";
        }
      } @else {
        @if (nth($type, 1) == "up") {
          $finalPoint: $point + 1;
          $finalType: "min-#{$whichProp}";
        }
      }

      @media ($finalType: #{$finalPoint}) {
        @content;
      }
    }
  } @else {
    @warn "Unfortunately, value from first parameter : `#{$point}` - is not a valid one. "
                + "Please use valid value.";
  }
}

@function torgb($color) {
  @if ($color != null) {
    @return #{red($color)}, #{green($color)}, #{blue($color)};
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

@function torem($value) {
  $remValue: math.div($value, 10px);
  @return strip-unit($remValue);
}

@function autoclamp($min, $max, $minvw: $smallPhone, $maxvw: $smallDesktop) {
  $minVwWidthInRem: torem($minvw);
  $maxVwWidthInRem: torem($maxvw);

  $slope: math.div(($max - $min), ($maxVwWidthInRem - $minVwWidthInRem));
  $yAxis: -$minVwWidthInRem * $slope + $min;

  @return clamp(
    #{$min},
    #{$yAxis} + #{strip-unit($slope * 100) * 1vw},
    #{$max}
  );
}
